#!/bin/bash

# Help function
container_help() {
    cat <<EOF
Usage: bm <command> [options] <bookmarks-name>

Commands requiring bookmarks name:
  run       Create and start the bookmarks container interactively
  start     Start container in detached mode (same as: run -d)
  stop      Stop the running bookmarks container
  restart   Restart the bookmarks container
  log       Show logs from the bookmarks container
  config    Display the Docker Compose configuration
           -e        Configure environment variables (port, paths, credentials)
  admin     Run commands in the container:
           -s        Open an interactive shell
           -x        Execute a shell command
           [args]    Run Django manage.py commands (default)
  delete    Delete container, environment file and data (DANGEROUS!)

Commands with optional bookmarks name:
  status    Show status of all instances or specific instance
           -q        Quiet mode - only output running instance names

Commands that don't use bookmarks name:
  upgrade   Upgrade all instances to latest linkding version
  help      Show this help message

Examples:
  bm run mybookmarks          # Create and start container interactively
  bm run -d mybookmarks      # Create and start container in background
  bm start mybookmarks       # Start container in background
  bm stop mybookmarks        # Stop the container
  bm status                  # Show all instances status
  bm status -q              # List running instances (for scripts)
  bm status mybookmarks     # Check specific instance status
  bm upgrade               # Upgrade all instances to latest version

Notes:
  - First run will create a .env file if port 9090 is in use
  - assets/custom-logo.png will replace default logo if present
  - Generated CSS files are named: <bookmarks>-custom[-light|-dark].css
EOF
}

# Main container function
container() {
    COMMAND=$1

    # Handle commands that don't need name checking
    case "$COMMAND" in
        upgrade)
            image_upgrade
            return
            ;;
        status)
            shift
            check_status "$@"
            return
            ;;
        *)
            ;;
    esac

    # Now check for minimum arguments
    if [ $# -lt 1 ]; then
        container_help
        return 1
    fi

    shift

    # Get script directory and change to it
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    pushd "$SCRIPT_DIR" &> /dev/null || { echo "Error: Could not change to script directory"; return 1; }

    # Set up trap to ensure we popd on any exit
    trap 'popd &> /dev/null' EXIT

    # Initialize OPTIONS array
    OPTIONS=()

    # Parse options and bookmarks name
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -*)
                OPTIONS+=("$1")
                shift
                ;;
            *)
                export BOOKMARKS_NAME=$1
                shift
                break
                ;;
        esac
    done

    # Ensure bookmarks name is provided for commands that need it
    if [[ -z "$BOOKMARKS_NAME" ]] && [[ "$COMMAND" != "help" ]]; then
        echo "Error: Bookmarks name is required"
        container_help
        return 1
    fi

    export COMPOSE_PROJECT_NAME=$BOOKMARKS_NAME
    export ENV_FILE=containers/$BOOKMARKS_NAME.env
    export HOST_PORT=9090

    # Remaining arguments are passed to the command
    ARGS=("$@")

    export LD_SUPERUSER_NAME=admin
    # Password for the initial superuser, leave empty to disable credentials authentication and rely on proxy authentication instead
    export LD_SUPERUSER_PASSWORD=admin

    if [[ -f $ENV_FILE ]]; then
        set -a; source $ENV_FILE; set +a
    fi

     export HOST_VOLUME_PATH=${HOST_VOLUME_PATH:-${BOOKMARKS_HOST_VOLUME_DIR:-${PWD}}/bookmarks/${BOOKMARKS_NAME}}

    if [[ "$COMMAND" == "run" || "$COMMAND" == "start" ]]; then
        # Create the directory HOST_VOLUME_PATH quietly but exit with a message if it cannot be made
        mkdir -p "$HOST_VOLUME_PATH" > /dev/null 2>&1 || { echo "Failed to create directory $HOST_VOLUME_PATH"; return 1; }

        # Check if HOST_PORT is being used and if so ask the user if they want to search for an available port
        if nc -z localhost "$HOST_PORT" 2>/dev/null; then
            read -p "Port $HOST_PORT is in use. Do you want to search for an available port? (y/n): " choice
            if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
                for i in {0..9}; do
                    HOST_PORT=$((HOST_PORT + 1))
                    if ! nc -z localhost "$HOST_PORT" 2>/dev/null; then
                        echo "Found available port $HOST_PORT"
                        echo "Saving HOST_PORT=$HOST_PORT to $ENV_FILE"
                        echo "HOST_PORT=$HOST_PORT" >> "$ENV_FILE"
                        break
                    fi
                    if [ $i -eq 9 ]; then
                        echo "No available ports found after trying 10 ports starting from $HOST_PORT"
                        return 1
                    fi
                done
            else
                echo "Please add a port manually to the $ENV_FILE file. Example:"
                echo "HOST_PORT=<your_port>"
                return 1
            fi
        fi
    fi

    export HOST_PORT

    # Construct docker-compose command
    docker_compose="docker-compose -f compose.yml"
    [[ -f $ENV_FILE ]] && docker_compose+=" --env-file $ENV_FILE"
    [[ -f assets/custom-logo.png ]] && docker_compose+=" -f compose.logo.yml"


    if [[ $BM_DEBUG == "verbose" ]]; then
        echo $docker_compose 
        echo $HOST_VOLUME_PATH
        echo $BOOKMARKS_NAME
        echo $HOST_PORT
        env | grep LD_
    fi    


    case "$COMMAND" in
        run|start)
            # Check if container is already running
            container_id=$(docker ps -q -f name="${BOOKMARKS_NAME}-bookmarks")
            if [[ -n "$container_id" ]]; then
                echo "Container ${BOOKMARKS_NAME}-bookmarks is already running"
                echo "Use 'bm stop ${BOOKMARKS_NAME}' to stop it"
                echo "    'bm restart ${BOOKMARKS_NAME}' to restart it"
                return 1
            fi

            # First run configuration
            if [[ ! -f "$ENV_FILE" ]]; then
                mkdir -p "$(dirname "$ENV_FILE")" &>/dev/null
                touch "$ENV_FILE"
                echo -e "\nFirst time running '$BOOKMARKS_NAME' bookmarks container."
                echo "This will:"
                echo "1. Create data directory: $HOST_VOLUME_PATH"
                echo "2. Use default port: ${HOST_PORT}"
                echo "3. Use default admin credentials: admin/admin"
                echo -e "\nWould you like to configure these settings first? (y/n): "
                read -r configure
                if [[ $configure =~ ^[Yy] ]]; then
                    container_env "$BOOKMARKS_NAME"
                    if [[ ! -f "$ENV_FILE" ]]; then
                        echo "Configuration cancelled. Run './bm config -e $BOOKMARKS_NAME' to configure later."
                        return 1
                    fi
                    # Re-source the env file after configuration
                    set -a; source "$ENV_FILE"; set +a
                fi
            fi

            # Execute the command with any options
            cmd="$docker_compose up"
            [[ $COMMAND == 'start' ]] && cmd+=" -d"
            [[ ${#OPTIONS[@]} -gt 0 ]] && cmd+=" ${OPTIONS[*]}"
            $cmd
            return $?
            ;;
        stop)
            $docker_compose stop
            return $?
            ;;
        log)
            $docker_compose logs -f
            ;;
        restart)
            $docker_compose restart
            return $?
            ;;
        config)
            if [[ " ${OPTIONS[@]} " =~ " -e " ]]; then
                container_env "$BOOKMARKS_NAME"
            else
                $docker_compose config
            fi
            ;;
        admin)
            if [[ " ${OPTIONS[@]} " =~ " -x " ]]; then
                docker exec -it ${BOOKMARKS_NAME}-bookmarks ${ARGS[@]}
                return
            fi
            if [[ " ${OPTIONS[@]} " =~ " -s " ]]; then
                docker exec -it ${BOOKMARKS_NAME}-bookmarks bash -l
                return 
            fi
            docker exec -it ${BOOKMARKS_NAME}-bookmarks python manage.py "${ARGS[@]}"
            ;;
        css)
            bm_customcss "$BOOKMARKS_NAME"
            ;;
        delete)
            # Check if anything exists to delete
            if ! docker ps -a | grep -q "${BOOKMARKS_NAME}-bookmarks" && \
               ! [[ -f "$ENV_FILE" ]] && \
               ! [[ -d "$HOST_VOLUME_PATH" ]]; then
                echo "Nothing to delete - container, env file and data directory don't exist"
                return 0
            fi

            echo -e "\033[1;31mWARNING: This will permanently delete:\033[0m"
            [[ -n $(docker ps -a -q -f name="${BOOKMARKS_NAME}-bookmarks") ]] && \
                echo "1. Container: ${BOOKMARKS_NAME}-bookmarks"
            [[ -f "$ENV_FILE" ]] && \
                echo "2. Environment file: $ENV_FILE"
            [[ -d "$HOST_VOLUME_PATH" ]] && \
                echo "3. Data directory: $HOST_VOLUME_PATH"
            echo -e "\033[1;31mThis action cannot be undone!\033[0m"
            
            # First confirmation
            echo -e "\nType 'yes' to continue: "
            read -r confirm
            [[ "$confirm" != "yes" ]] && { echo "Deletion cancelled."; return 1; }
            
            # Second confirmation - type bookmarks name
            echo -e "\n\033[1;31mFinal warning!\033[0m"
            echo -e "Type the bookmarks name '\033[1m$BOOKMARKS_NAME\033[0m' to confirm deletion: "
            read -r confirm_name
            if [[ "$confirm_name" != "$BOOKMARKS_NAME" ]]; then
                echo "Names do not match. Deletion cancelled."
                return 1
            fi
            
            # Stop and remove container if it exists
            if [[ -n $(docker ps -a -q -f name="${BOOKMARKS_NAME}-bookmarks") ]]; then
                echo "Stopping and removing container..."
                $docker_compose down
                # Ensure container is removed even if compose fails
                docker rm -f "${BOOKMARKS_NAME}-bookmarks" &>/dev/null || true
            fi
            
            # Delete files if they exist
            [[ -f "$ENV_FILE" ]] && rm -f "$ENV_FILE" && echo "Deleted environment file: $ENV_FILE"
            [[ -d "$HOST_VOLUME_PATH" ]] && rm -rf "$HOST_VOLUME_PATH" && echo "Deleted data directory: $HOST_VOLUME_PATH"
            
            echo -e "\033[32mDeletion complete\033[0m"
            ;;
        help)
            container_help
            ;;
        *)
            echo "Unknown command: $COMMAND"
            container_help
            ;;
    esac
}

 # Status check function
check_status() {

    local quiet
    [[ "$1" == "-q" ]] && quiet=true && shift
    
    # Helper function for conditional echo
    quiet() {
        if [[ $quiet ]]; then
            [[ "$1" == "-n" ]] && echo "$@"
        else 
            [[ "$1" == "-n" ]] && return
            echo "$@"
        fi
    }

   # If no name provided, show all instances
   if [[ -z "$1" ]]; then

   # Ensure the directory exists first
    if [[ -d containers ]]; then
        # Clear the array
        instances=()
        # Loop through files directly to avoid issues with basename in find
        while IFS= read -r file; do
            if [[ -n "$file" ]]; then
            # Extract filename without the .env extension
            filename=$(basename "$file" .env)
            instances+=("$filename")
            fi
        done < <($(type -P find) containers -maxdepth 1 -type f -name "*.env" 2>/dev/null | sort)
        
        # Show the result or handle empty case
        if [[ ${#instances[@]} -eq 0 ]]; then
            echo "No linkding instances found in containers directory"
            return
        fi
     else
        echo "Directory 'containers' does not exist"
    return
    fi
 
        # Array to collect running instances
        running_instances=()
        
        # Check each instance
        quiet "=== Linkding Instances Status ==="
        for instance in "${instances[@]}"; do
            if [[ -n $(docker ps -q -f name="${instance}-bookmarks") ]]; then
                quiet "- $instance (RUNNING)"
                running_instances+=("$instance")
            else
                quiet "- $instance (STOPPED)"
            fi
        done
        
        # Output running instances (space-separated) if any found
        [[ ${#running_instances[@]} -gt 0 ]] && quiet -n "${running_instances[*]}"
        return $((${#running_instances[@]} > 0 ? 0 : 1))
    else
        # Check if instance exists first
        if [[ ! -f "containers/$1.env" ]]; then
            quiet "Instance $1 does not exist"
            return 2
        fi
        
        # Check specific instance
        if [[ -n $(docker ps -q -f name="$1-bookmarks") ]]; then
            quiet "$1 is RUNNING"
            return 0
        else
            quiet "$1 is STOPPED"
            return 1
        fi
    fi
}

# Image upgrade function
image_upgrade() {

    # Find all env files to identify all instances
    ENV_FILES=(containers/*.env)
    if [ ${#ENV_FILES[@]} -eq 0 ]; then
        echo "No linkding instances found, nothing to upgrade"
        return 1
    fi

    # Set image name once and use it throughout
    local image="sissbruecker/linkding"

    if [[ -n "$BM_DEBUG" ]]; then
       echo -e "\n\033[1;33mDebug mode: Bypassing version check\033[0m"
     else


        # Display header information
        echo "=========================================================="
        echo "LinkDing Update Checker"
        echo "Current Date and Time (UTC): $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "Checking image: $image"
        echo "Docker Hub URL: https://hub.docker.com/r/sissbruecker/linkding"
        echo "=========================================================="


           # Get local and remote versions
        LOCAL_VERSION=$(local_version)
        if [ $? -ne 0 ]; then
            echo "$LOCAL_VERSION"  # Error message from function
            return 1
        fi

        echo "Local version: $LOCAL_VERSION"

        # # Extract namespace and repository from image for API calls
        REMOTE_VERSION=$(curl -s "https://hub.docker.com/v2/repositories/$image/tags?page_size=100" | \
        jq -r '.results[].name' | \
        grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | \
        sort -t. -k1,1nr -k2,2nr -k3,3nr | \
        head -n1)

        echo "Latest available version: $REMOTE_VERSION"

        # Compare versions
        if [ "$LOCAL_VERSION" = "$REMOTE_VERSION" ]; then
            echo -e "\033[1;32mYou have the latest version\033[0m, nothing to upgrade"
            return 0
        fi

    fi

    # Get running instances using check_status
    echo -e "\nFound the following instances:"
    RUNNING_INSTANCES=()
    IFS=' ' read -r -a RUNNING_INSTANCES <<< "$(check_status -q)"
    # echo running instances ${RUNNING_INSTANCES[@]}
    # check_status -q
    
    # Show status of all instances
    check_status

    echo -e "\n\033[1;33mWARNING: This will upgrade ALL instances at once!\033[0m"
    echo "The upgrade process will:"
    echo "1. Stop all running instances"
    echo "2. Pull the latest linkding image"
    echo "3. Restart previously running instances"
    
    echo -e "\n\033[1;31mType 'yes' to proceed with upgrade: \033[0m"
    read -r confirm
    if [[ "$confirm" != "yes" ]]; then
        echo "Upgrade cancelled"
        return 1
    fi

    # Stop all running instances
    if [ ${#RUNNING_INSTANCES[@]} -gt 0 ]; then
        echo -e "\nStopping running instances..."
        for instance in "${RUNNING_INSTANCES[@]}"; do
            echo "Stopping $instance..."
            if ! container stop "$instance"; then
                echo "Error: Failed to stop $instance"
                return 2
            fi
        done
    fi

    # Pull new image
    echo -e "\nPulling latest linkding image..."
    if ! docker pull "$image"; then
        echo "Error: Failed to pull latest image"
        echo Image: $image
        retrun 2
    fi

    # Verify new version matches expected version
    NEW_VERSION=$(local_version)

    [[ $BM_DEBUG ]] && REMOTE_VERSION=$NEW_VERSION
    if [ "$NEW_VERSION" != "$REMOTE_VERSION" ]; then
        echo "Error: Version mismatch after pull. Expected $REMOTE_VERSION, got $NEW_VERSION"
        return 3
    fi

    echo -e "\nUpgrade complete!"
    echo "Installed version: $NEW_VERSION"

    # Restart previously running instances
    if [ ${#RUNNING_INSTANCES[@]} -gt 0 ]; then
        echo -e "\nRestarting previously running instances..."
        for instance in "${RUNNING_INSTANCES[@]}"; do
            echo "Starting $instance..."
            if ! container start "$instance"; then
                echo "Error: Failed to start $instance"
                echo "Please check the container logs and try starting it manually with:"
                echo "  ./bm start $instance"
                return 1
            fi
            
            # Verify container is running
            if ! check_status -q "$instance"; then
                echo "Error: Container $instance failed to start"
                echo "Please check the container logs and try starting it manually with:"
                echo "  ./bm start $instance"
                return 1
            fi
        done
    fi

    echo -e "\n\033[32mUpgrade complete!\033[0m"
}

# Get version from local image
local_version() {
    local image=${1:-$IMAGE}
    image=${image:-sissbruecker/linkding}
    # Create a temporary container without running the entrypoint
    local CONTAINER_ID=$(docker create --entrypoint="" $image cat /etc/linkding/package.json)
    if [ $? -ne 0 ]; then
        echo "Error: Could not create temporary container. Is the image pulled?"
        return 1
    fi
    # Extract the package.json content
    local PACKAGE_JSON=$(docker start -a $CONTAINER_ID)
    docker rm $CONTAINER_ID > /dev/null

    # Extract and return the version
    echo "$PACKAGE_JSON" | grep -o '"version": "[^"]*' | cut -d'"' -f4
}

# Environment configuration function
container_env() {
    local BOOKMARKS_NAME=$1
    
    # If env file exists, show it and offer options
    if [[ -f "$ENV_FILE" ]]; then
        echo -e "\nCurrent environment settings for $BOOKMARKS_NAME:"
        echo -e "\n********************************"
        cat "$ENV_FILE"
        echo -e "\n********************************"
        echo -e "\nWould you like to (e)dit directly or run the (c)onfigurator? [e/c]: "
        read -r choice
        case "$choice" in
            [Ee]*) 
                echo -e "Enter editor name (default: edit): "
                read -r editor_name
                ${editor_name:-edit} "$ENV_FILE"
                return
                ;;
            [Cc]*) ;; # Continue to configurator
            *) return ;;
        esac
    fi

    local default_path="${PWD}/bookmarks/${BOOKMARKS_NAME}"
    local current_path=${HOST_VOLUME_PATH:-${BOOKMARKS_HOST_VOLUME_DIR:-$default_path}}
    local TEMP_ENV=$(mktemp)

    # Copy existing env or start fresh
    [[ -f "$ENV_FILE" ]] && cp "$ENV_FILE" "$TEMP_ENV"
    
    # Helper function to update temp env file
    update_env_var() {
        local key=$1
        local value=$2
        sed -i "/^${key}=/d" "$TEMP_ENV"
        echo "${key}=${value}" >> "$TEMP_ENV"
    }

    # Host port configuration
    echo -e "\nCurrent port: ${HOST_PORT:-9090}"
    read -p "Enter new port (or Enter to keep, 'auto' for next available): " new_port
    if [[ $new_port == "auto" ]]; then
        new_port=$(find_available_port 9090)
        echo "Found available port: $new_port"
    fi
    [[ -n $new_port ]] && update_env_var "HOST_PORT" "$new_port"

    # Volume path configuration
    echo -e "\nDefault data path: $default_path"
    echo -e "Current path: $current_path"
    echo "Enter new path option:"
    echo "1) Full custom directory name"
    echo "2) Base directory (will append /bookmarks/$BOOKMARKS_NAME, recommended)"
    read -p "Choice [Enter to keep/reset default]: " path_choice

    case "$path_choice" in
        1)  read -p "Enter full custom path: " new_path
            if [[ -n $new_path ]]; then
                sed -i '/BOOKMARKS_HOST_VOLUME_DIR=/d' "$TEMP_ENV"  # Remove DIR if exists
                update_env_var "HOST_VOLUME_PATH" "$new_path"
                echo "Updated path: $new_path"
            fi
            ;;
        2)  read -p "Enter base directory: " new_dir
            if [[ -n $new_dir ]]; then
                sed -i '/HOST_VOLUME_PATH=/d' "$TEMP_ENV"  # Remove PATH if exists
                update_env_var "BOOKMARKS_HOST_VOLUME_DIR" "$new_dir"
                echo "Updated path: $new_dir/bookmarks/$BOOKMARKS_NAME"
            fi
            ;;
        "")  # Reset to default if current path is different
            if [[ "$current_path" != "$default_path" ]]; then
                # Remove any existing path entries
                sed -i '/HOST_VOLUME_PATH=/d' "$TEMP_ENV"
                sed -i '/BOOKMARKS_HOST_VOLUME_DIR=/d' "$TEMP_ENV"
                echo "Reset to default path: $default_path"
            fi
            ;;
    esac

    # Superuser configuration
    echo -e "\nCurrent superuser: ${LD_SUPERUSER_NAME:-admin}"
    read -p "Enter new superuser name (or Enter to keep): " new_user
    [[ -n $new_user ]] && update_env_var "LD_SUPERUSER_NAME" "$new_user"

    echo -e "\nCurrent password: ${LD_SUPERUSER_PASSWORD:-admin}"
    read -p "Enter new password (or Enter to keep): " new_pass
    [[ -n $new_pass ]] && update_env_var "LD_SUPERUSER_PASSWORD" "$new_pass"

    # Show final config and ask for confirmation
    echo -e "\nProposed environment settings:"
    echo -e "\n********************************"
    cat "$TEMP_ENV"
    echo -e "\n********************************"
    
    echo -e "\nSave these settings? (y/n): "
    read -r save_choice
    if [[ $save_choice =~ ^[Yy] ]]; then
        mkdir -p "$(dirname "$ENV_FILE")" &>/dev/null
        mv "$TEMP_ENV" "$ENV_FILE"
        echo "Settings saved to $ENV_FILE"
        
        echo -e "\nConfiguration complete! You can now:"
        echo "- Start in foreground:  ./bm run $BOOKMARKS_NAME"
        echo "- Start in background:  ./bm start $BOOKMARKS_NAME"
    else
        echo "Changes discarded"
    fi
    
    # Clean up temp file
    [[ -f "$TEMP_ENV" ]] && rm -f "$TEMP_ENV"
}

# Custom CSS generation function
bm_customcss() {
    local prefix="containers/${1:+$1-}"
    local scheme_suffix=""   # Will be set after theme selection
    local output_css="${prefix}custom.css"
    local custom_title=""    # Variable to store title
    local env_file="containers/${1}.env"

    echo "=== Linkding Custom CSS Generator ==="
    echo -e "\nThis will generate '${output_css}' with custom title and/or color theme for linkding."
    echo "After generation, you'll need to copy the CSS and paste the contents into"
    echo "in the 'Custom CSS' field found in the Settings [General] page of the webu, Click Save."
    echo -e "--------------------------------------------------------\n"

    # Ask for custom site title first
    echo -e "\nEnter custom site title"
    echo -e  "or <return> to keep current title: ${LD_SITE_TITLE:-linkding}\n"
    read -p "> " title
    LD_SITE_TITLE=${title:-$LD_SITE_TITLE}
     
    
    # Color theme selection
    echo -e "\n------- Color Theme ---------"

    echo "Current theme: ${LD_THEME:-Linkding} (${LD_SITE_BASE_COLOR:-default})"
    echo "Current scheme: ${LD_SCHEME:-dark}"

    echo -e "\n\nSelect a color theme:"
    echo "1) Linkding Purple (no color theme change)"
    echo "2) Forest Green"
    echo "3) Ocean Blue"
    echo "4) Crimson"
    echo "5) Turquoise"
    echo "Or enter a custom hex color (e.g., #FF5733)"
    echo "Or <return> to keep current"
    
    read -p "Choice: " choice

    # Process theme choices
    case $choice in
        "")
            # Empty input - do nothing
            echo "No theme change selected, keeping current settings"
            ;;
        1) 
            # Reset to default theme (unset variables)
            unset LD_THEME
            unset LD_SITE_BASE_COLOR
            unset LD_SCHEME
            ;;
         2) 
            LD_SITE_BASE_COLOR="#50B464" 
            LD_THEME="Forest Green"
            ;;
        3) 
            LD_SITE_BASE_COLOR="#3D8DD1" 
            LD_THEME="Ocean Blue"
            ;;
        4) 
            LD_SITE_BASE_COLOR="#D6223A" 
            LD_THEME="Crimson"
            ;;
        5) 
            # Adjust the turquoise color to be more true to the name
            LD_SITE_BASE_COLOR="#20B2AA" # Adjusted to be a more balanced turquoise
            LD_THEME="Turquoise"
            ;;
        \#*) 
            LD_SITE_BASE_COLOR="$choice"
            if [[ ! $LD_SITE_BASE_COLOR =~ ^#[0-9A-Fa-f]{6}$ ]]; then
                echo "Error: Invalid hex color format. Please use format #RRGGBB"
                return 1
            fi
            echo -e "\nEnter a name for your custom theme: "
            read LD_THEME
            LD_THEME=${LD_THEME:-"Custom"}
            ;;
        *)
            # Invalid input - check if it's empty
            if [[ -z "$choice" ]]; then
                echo "No theme change selected, keeping current settings"
            else
                # Otherwise reset to default
                echo "Invalid selection, using default Purple theme"
                unset LD_THEME
                unset LD_SITE_BASE_COLOR
                unset LD_SCHEME
            fi
            ;;
    esac

      # Check for default case (no changes needed)
    if [[ -z "$LD_SITE_TITLE" && ! $LD_THEME ]]; then
        echo -e "\nNo changes requested - using default linkding theme and title."
        echo "no custom css will be generated"
        echo "simply remove custom css from the settings UI."
        return 0
    fi
    
    # Theme variant selection - skip for default theme
    if [[ $choice && $choice != "1" ]]; then
        # Use existing scheme as default if available
        local default_scheme=${LD_SCHEME:-dark}
        local scheme_suffix
        echo -e "\nSelect scheme (d)ark or (l)ight [default: $default_scheme]: "
        read scheme_choice
        
        if [[ $scheme_choice =~ ^[Ll] ]]; then
            LD_SCHEME="light"
            scheme_suffix="-light"
        else
            LD_SCHEME="dark"
            scheme_suffix="-dark"
        fi
    fi

    # Save changes to environment file if we have an instance name
    if [[ -n "$1" && -f "$env_file" ]]; then
        echo "Saving theme preferences to environment file..."
        
        # Define a function to update or remove variables in env file
        update_env_file() {
            local key=$1
            local value=$2
            
            # If value is unset or empty, remove the variable
            if [[ -z "$value" ]]; then
                sed -i "/^${key}=/d" "$env_file"
            # If variable exists, update it
            elif grep -q "^${key}=" "$env_file"; then
                sed -i "s|^${key}=.*|${key}=\"${value}\"|" "$env_file"
            # Otherwise add it
            else
                # Ensure file ends with newline
                [[ -s "$env_file" && $(tail -c1 "$env_file" | wc -l) -eq 0 ]] && echo "" >> "$env_file"
                echo "${key}=\"${value}\"" >> "$env_file"
            fi
        }
        
        # Update or remove each variable
        update_env_file "LD_SITE_TITLE" "$LD_SITE_TITLE"
        update_env_file "LD_THEME" "$LD_THEME"
        update_env_file "LD_SITE_BASE_COLOR" "$LD_SITE_BASE_COLOR"
        update_env_file "LD_SCHEME" "$LD_SCHEME"
        
        echo "Environment file updated!"
    fi

    # Update output filename to include scheme
    local output_css="${prefix}custom${scheme_suffix}.css"

    # Generate initial CSS with header
    cat << EOF > "$output_css"
/* Custom CSS file for Linkding created on */
/* $(date) */    
$([[ $LD_THEME ]] && echo "/* Theme: $LD_THEME ($LD_SITE_BASE_COLOR) - $LD_SCHEME */")
$([[ $LD_SITE_TITLE ]] && echo "/* Title: $LD_SITE_TITLE */")
/* *******************************************/
EOF

    # Conditionally append title styling
    if [[ -n "$LD_SITE_TITLE" ]]; then
        cat << TITLE_CSS >> "$output_css"
/* Header text styling */
header h1 {
    font-size: 0;
    position: relative;
}

header h1::before {
    content: "${LD_SITE_TITLE}";
    font-size: 1.5rem;
    color: var(--primary-text-color);
    display: block;
}

/* Add powered by linkding attribution */
header h1::after {
    content: "powered by linkding";
    position: absolute;
    bottom: -1.2rem; /* Position below the title */
    left: 0;
    font-size: 0.7rem;
    opacity: 0.8; /* Slightly increased from 0.7 for better visibility */
    color: var(--contrast-70);
    text-shadow: 0 1px 2px var(--contrast-90);
}
TITLE_CSS
    fi
   
    if [[ -n "$LD_SITE_BASE_COLOR" ]]; then
        echo -e "\nGenerating ${LD_SCHEME:-dark} theme with base color $LD_SITE_BASE_COLOR ($LD_THEME)"
        python3 maketheme.py "$LD_SITE_BASE_COLOR" "${LD_SCHEME:-dark}" >> "$output_css"
    fi

    # Generate CSS output and display
    echo 
    echo "**************CUSTOM LINKDING CSS *************"
    cat "$output_css"
    echo "*********************************************"
    echo "Copy the above CSS to linkding's custom CSS field in admin settings"
    
    # Only offer clipboard/editor if not in SSH session
    if [[ -z "$SSH_CLIENT" && -z "$SSH_TTY" ]]; then
        # Clipboard handling
        if type -P xclip &> /dev/null; then
            cat "$output_css" | xclip -selection clipboard
            echo "CSS has been copied to clipboard"
        else
            echo "Note: xclip not found. Install with your package manager to enable clipboard support"
        fi

        # Editor option
        echo -e "\nWould you like to edit the CSS before using it? (y/n): "
        read edit_choice
        if [[ $edit_choice =~ ^[Yy] ]]; then
            echo -e "Enter editor name (default: edit): "
            read editor_name
            editor_name=${editor_name:-edit}
            
            if type -P "$editor_name" &> /dev/null; then
                $editor_name "$output_css" &
                echo "After editing, the content will need to be copied manually to linkding's custom CSS field"
            else
                echo "Editor '$editor_name' not found, skipping..."
            fi
        fi
    fi
}



# Call the container function if the script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    if [ "$1" == "help" ] || [ "$#" -eq 0 ]; then
        container_help
    else
        container "$@"
    fi
fi


